# Run the github Continuous Integration
name: CI

# Run this action on:
on:
  
  # When the repo is PUSHed to [master] branch
  push:
    branches: [ master ]

  # And allow a manual 'run' button in the github action tab
  workflow_dispatch:

# When run do this job:
jobs:
  run:    

    # Use the operating system specified in the strategy 'matrix' below.
    runs-on: ${{ matrix.operating-system }}

    # Matrix of variables 
    strategy:      
      matrix:
        operating-system: [ubuntu-latest]
        php-versions: ['7.4']
        phpunit: [7.5.15]

    # Give the runner a title (using the matrix variables)
    name: PHP ${{ matrix.php-versions }} Test on ${{ matrix.operating-system }}
    
    # Include MySQL as a service
    services:
      mysql:
        image: mysql:5.7.27
        env:
          # Default password into the databases
          MYSQL_ROOT_PASSWORD: root
        ports:
            # Use a different port to tunnel into the container.
          - 33306:3306
        options: --health-cmd="mysqladmin ping" --health-interval=10s --health-timeout=5s --health-retries=3

    # Now do these steps.
    steps:

      # Use the 'checkout' action (https://github.com/actions/checkout)
      # To pull this repo into the root of your container.
    - name: Checkout
      uses: actions/checkout@v2

      # Also pull a second (private) repo.
    - name: Checkout ACF-pro
      uses: actions/checkout@v2
      with:
        # Name of the repo to pull
        repository: IORoot/advanced-custom-fields-pro
        # Put it in a separate directory
        path: advanced-custom-fields-pro
        # Pull the master branch
        ref: master
        # Use this deploy secret to allow access to the private repo
        # 1. Add the deploy key to the private repo (https://docs.github.com/en/free-pro-team@latest/developers/overview/managing-deploy-keys)
        # 2. Add a secret called 'QA_DEPLOY_KEY' into the secrets of THIS repo with the deploy key. https://docs.github.com/en/free-pro-team@latest/actions/reference/encrypted-secrets
        # 
        # Now this repo can access the private repo using the token.
        token: ${{ secrets.QA_DEPLOY_KEY }}
    
      # Install PHP
    - name: Setup PHP
      # Using this repo
      uses: shivammathur/setup-php@v1
      # And these settings
      with:
        php-version: ${{ matrix.php-versions }} # Change the version to install with the matrix variables above.
        extension-csv: mbstring, intl #optional, setup extensions
        ini-values-csv: post_max_size=256M, short_open_tag=On #optional, setup php.ini configuration
        coverage: xdebug #optional, setup coverage driver
        pecl: false #optional, setup PECL

      # Check PHP is installed.
      # Weird Note - the next step 'composer install' fails if this PHP Check is not run.
    - name: Check PHP Version
      run: php -v

      # Install composer to use your autoloader
    - name: Composer install
      run: composer install --optimize-autoloader --prefer-dist
      
      # Install PHPUnit using the matrix variables above
    - name: Install PHPUnit
      run: composer global require "phpunit/phpunit=${{ matrix.phpunit }}"

      # Check listing of directory
      # Also a quick example of multi-commands and the $GITHUB_WORKSPACE variable.
    - name: list dir
      run: |
        ls -la
        ls $GITHUB_WORKSPACE

      # Run the Wordpress PHPUnit install script.
      # This will install wordpress into /tmp/wordpress
      # It will create a wordpress_test database using the [root root] credentials
      # It will connect to the localhost (127.0.0.1) using the port 33306
      #
      # Note - use the external container port listed above in the mysql section.
      # Install the 'latest' version of wordpress too.
    - name: Install WP Tests
      run: bash bin/install-wp-tests.sh wordpress_test root root 127.0.0.1:33306 latest
      
      # RUN, You fools.
      # Kick of the phpunit testsuite.
    - name: PHPUnit tests
      run: phpunit